<?php
$_helper = $this->helper('Netbaseteam\Onlinedesign\Helper\Data');
include_once($_helper->getLibOnlineDesign().'/Onlinedesign/includes/class.helper.php');
include_once($_helper->getLibOnlineDesign().'/Onlinedesign/includes/class-util.php');
include_once($_helper->getLibOnlineDesign().'/Onlinedesign/includes/class.nbdesigner.php');

$nbdesigner = new \Nbdesigner_Plugin();
$subsets =  nbd_font_subsets();
$list_all_google_font = $nbdesigner->nbdesigner_get_list_google_font();
?>
<div class="wrap nbdesigner-container">
    <div class="postbox" ng-app='font-app' ng-controller="fontCtrl" ng-cloak>
        <div class="inside">
            <div class="showbox" style="display: none;">
                <div class="loader">
                    <svg class="circular" viewBox="25 25 50 50">
                        <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>
                    </svg>
                </div>
            </div>            
            <div class="gg-font-option">
                <input ng-model="filterFont.name" placeholder="Font name" ng-change="resetCurentPage()" class="admin__control-text">
                <select ng-model="filterFont.category" ng-change="resetCurentPage()" class="admin__control-select">
                    <option value="">All Categories</option>
                    <option value="serif">Serif</option>
                    <option value="sans-serif">Sans Serif</option>
                    <option value="display">Display</option>
                    <option value="handwriting">Handwriting</option>
                    <option value="monospace">Monospace</option>
                </select>          
                <select ng-model="filterFont.subset" ng-change="resetCurentPage()" class="admin__control-select">
                    <option value="">All subsets</option>
                    <?php
                        foreach( $subsets as $key => $subset ):
                    ?>
                        <option value="<?php echo $key; ?>"><?php echo $subset['name']; ?></option>
                    <?php endforeach; ?>
                </select>
                <a class="button button-primary action-basic" ng-click="updateGoogleFont($event)"><?php echo __('Update');?></a>
            </div>          
            <div class="gg-font-preview-wrap">
                <div class="nbd-pagesize-wrap">
                    <b><?php echo __('Total');?> {{fonts.length}} <?php echo __('fonts');?></b>
                    <a class="button button-primary action-basic" ng-click="selectAll()"><?php echo __('Select All');?></a>
                    <a class="button button-primary action-basic" ng-click="unselectAll()"><?php echo __('Unselect All');?></a>
                    <div style="display: inline-block; float: right;">
                        <label for='nbd-selected'><?php echo __('Display ');?></label>
                        <select id='nbd-selected' ng-model="filterFont.select" ng-change="resetCurentPage()" class="admin__control-select">
                            <option value=""><?php echo __('All');?></option>
                            <option value="selected"><?php echo __('Selected');?></option>
                            <option value="unselected"><?php echo __('Unselected');?></option>
                        </select>                         
                        <label for='nbd-page-size'><?php echo __('Display ');?></label>
                        <select id='nbd-page-size' ng-model="filterFont.pageSize" ng-change="resetCurentPage()" class="admin__control-select">
                            <option ng-value="5">4</option>
                            <option ng-value="10">12</option>
                            <option ng-value="20">20</option>
                            <option ng-value="30">36</option>
                            <option ng-value="50">56</option>
                        </select>                
                    </div>
                </div>
                <p><small><?php echo __('Click check mark to select/unselect font');?></small></p>
                <p style="font-size: 10px; font-weight: bold; color: red;"><?php echo __('Please remove unused fonts to make the design editor loads faster');?></p>
                <div class="gg-font-preview-wrap-inner">
                    <div class="gg-font-preview" ng-repeat="font in fonts | startFrom:filterFont.currentPage*filterFont.pageSize | limitTo:filterFont.pageSize">
                        <div class="gg-font-preview-inner-wrap" style="font-family: '{{font.family}}',-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif">
                            <div class="gg-font-preview-inner">
                                <p class="gg-font-name">{{font.family}}</p>
                                <p font-on-load data-preview="fSubsets[font.subsets[0]]['preview_text']" data-font="font.family" ><span class="font-preview" style="display: none;" contenteditable="true">{{fSubsets[font.subsets[0]]['preview_text']}}</span></p>
                                <span title="{{font.selected ? '<?php echo __('Unselect');?>' : '<?php echo __('Select');?>'}}" ng-class="font.selected ? '' : 'uncheck'" class="action dashicons dashicons-yes disable" ng-click="selectFont( font, $event )"></span>
                            </div>
                        </div>    
                    </div>
                </div>
            </div>
            <div class="gg-font-pagination" font-pagination data-filter-font="filterFont" data-total="fonts.length"></div>
        </div>
    </div>
</div>

<script type='text/javascript' src="<?php echo NBDESIGNER_PLUGIN_URL .'assets/libs/jquery.min.js'; ?>"></script>
<script type='text/javascript' src="<?php echo NBDESIGNER_PLUGIN_URL .'assets/libs/jquery-ui.min.js'; ?>"></script>
<script type='text/javascript' src="<?php echo NBDESIGNER_PLUGIN_URL .'assets/libs/angular-1.6.9.min.js'; ?>"></script>
<script type='text/javascript' src="<?php echo NBDESIGNER_PLUGIN_URL .'assets/libs/fontfaceobserver.js'; ?>"></script>
<script type='text/javascript' src="<?php echo NBDESIGNER_PLUGIN_URL .'sweetalert.min.js'; ?>"></script>

<script type="text/javascript">
    <?php 
        $path = NBDESIGNER_DATA_DIR. '/googlefonts.json';
        $selected_fonts = file_get_contents($path);
        if( $selected_fonts == '' ) $selected_fonts = '[]';
    ?>
    var admin_nbds = {
            assets_images   :   "<?php echo NBDESIGNER_PLUGIN_URL . 'assets/images/'?>",
            mes_success   :   "<?php echo __('Success')?>",
            nbds_lang   :   {
            	are_you_sure: "<?php echo __('Are you sure?')?>",
				complete: "<?php echo __('Complete!')?>",
				error: "<?php echo __('Oops! Try again later!')?>",
				warning_mes_backup_data: "<?php echo __('Restore your last data!')?>",
				warning_mes_delete_category: "<?php echo __('You will not be able to recover this category!')?>",
				warning_mes_delete_file: "<?php echo __('You will not be able to recover this file!')?>",
				warning_mes_delete_lang: "<?php echo __('You will not be able to recover this language!')?>",
				warning_mes_fill_category_name: "<?php echo __('Please fill category name!')?>"
            },
            nonce   :   "nbdesigner_add_cat",
            sku   :   "<?php echo NBDESIGNER_SKU ?>",
            url   :   "<?php echo $this->getUrl('onlinedesign/googlefont/update', array('_current'=>true)); ?>",
            url_check   :   "<?php echo NBDESIGNER_AUTHOR_SITE?>",
            url_gif   :   "<?php echo NBDESIGNER_PLUGIN_URL. 'assets/images/loading.gif'?>"
        };
    var selected_fonts= <?php echo $selected_fonts; ?>;
    var ggFonts = <?php echo file_get_contents(NBDESIGNER_PLUGIN_DIR. '/data/google-fonts-ttf.json'); ?>;

    var fontApp = angular.module('font-app', []);
    fontApp.controller('fontCtrl', ['$scope', 'fontObject', 'filterFontFilter', function($scope, fontObject, filterFontFilter){
        $scope.init = function(){
            angular.forEach(selected_fonts, function(_font, k) {    
                $scope.selectedFonts.push({name: _font.name});
            }); 
            $scope.updateSelectedFont();
        };
        $scope.selectedFonts = [];
        $scope.allFonts = ggFonts.items
        $scope.fSubsets = <?php echo json_encode(nbd_font_subsets()); ?>;
        $scope.filterFont = {};
        $scope.filterFont.currentPage = 0;
        $scope.filterFont.pageSize = 20;
        $scope.fonts = filterFontFilter($scope.allFonts, $scope.filterFont);
        $scope.$watchCollection('filterFont', function(newVal, oldVal){
            $scope.fonts = filterFontFilter($scope.allFonts, $scope.filterFont);
        }, true);   
        $scope.$watchCollection('selectedFonts', function(newVal, oldVal){
            $scope.fonts = filterFontFilter($scope.allFonts, $scope.filterFont);
        }, true); 
        $scope.resetCurentPage = function(){
            $scope.filterFont.currentPage = 0;
        };
        $scope.updateSelectedFont = function(){
            angular.forEach($scope.allFonts, function(font, key) {   
                $scope.allFonts[key].selected = false;
                angular.forEach($scope.selectedFonts, function(_font, k) {    
                    if( font.family == _font.name ) $scope.allFonts[key].selected = true;
                });        
            });            
        };
        $scope.selectAll = function(){
            $scope.selectedFonts = [];
            angular.forEach($scope.allFonts, function(font, key) {     
                $scope.selectedFonts.push({name: font.family});
            });            
            $scope.updateSelectedFont();
        };
        $scope.unselectAll = function(){
            $scope.selectedFonts = [];   
            $scope.updateSelectedFont();
        };
        $scope.selectFont = function( font, $event ){
            if( !font.selected ){
                $scope.selectedFonts.push({name: font.family});
            }else{
                var index = 0;
                angular.forEach($scope.selectedFonts, function(_font, k) {    
                    if( font.family == _font.name ) index = k;
                });         
                $scope.selectedFonts.splice(index, 1);
            }
            $scope.updateSelectedFont();
        };
        $scope.updateGoogleFont = function( $event ){
            jQuery.ajax({
                url: admin_nbds.url,
                method: "POST",
                data: {action: 'nbdesigner_add_google_font', fonts: JSON.stringify($scope.selectedFonts), 'nonce': admin_nbds.nonce, form_key: window.FORM_KEY},
                beforeSend: function () {
                    jQuery('.showbox').show();
                },
                complete: function () {
                    jQuery('.showbox').hide();
                }
            }).done(function (data) {
                data = JSON.parse(data);
                swal(admin_nbds.nbds_lang.complete, data.mes, "success");
            });
        }; 
        $scope.init();
    }]);
    fontApp.factory('fontObject', function($http) { 
        return {
            fn: function(callback) {
                $http({
                    method: "GET",
                    url: font_path
                }).then(function (response){
                    callback(response.data.items)
                },function (error){

                });
            }
        }
    });
    fontApp.filter('pageRange', function() {
        return function(input, total) {
            total = parseInt(total);
            for (var i=0; i<total; i++)
                input.push(i);
            return input;
        };
    });   
    fontApp.directive('stringToNumber', function() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
                ngModel.$parsers.push(function(value) {
                    return '' + value;
                });
                ngModel.$formatters.push(function(value) {
                    return parseFloat(value);
                });
            }
        }
    });    
    fontApp.directive('fontPagination', function(){
        return {
            restrict: 'A',
            scope: {
                filterFont: '=filterFont',
                total: '=total'
            },
            template: '{{filterFont.totalPages}}<span ng-if="filterFont.currentPage > 0" ng-click="changePage(0)"><?php echo __('First');?></span><span ng-if="filterFont.currentPage > 1" ng-click="changePage(filterFont.currentPage-1)">{{filterFont.currentPage}}</span><span ng-click="changePage(filterFont.currentPage)" class="active">{{filterFont.currentPage + 1}}</span><span ng-if="filterFont.currentPage < (totalPages - 2)" ng-click="changePage(filterFont.currentPage+1)">{{filterFont.currentPage + 2}}</span><span ng-if="filterFont.currentPage < (totalPages - 1)" ng-click="changePage(totalPages-1)"><?php echo __('Last');?></span>',
            link: {
                
            },
            controller: function ($scope) {
                $scope.pages = 1;
                $scope.$watch('total', function() {
                    $scope.totalPages = Math.ceil( $scope.total / $scope.filterFont.pageSize);
                });
                $scope.$watchCollection('filterFont', function() {
                    $scope.totalPages = Math.ceil( $scope.total / $scope.filterFont.pageSize);
                });    
                $scope.changePage = function( $index ){
                    $scope.filterFont.currentPage = $index;
                }
            }
        }        
    });
    fontApp.filter('startFrom', function() {
        return function(input, start) {
            start = +start;
            return input.slice(start);
        }
    });
    fontApp.filter("filterFont", function() {
        return function(fonts, filterFont) {
            var arrFont = [];
            angular.forEach(fonts, function(font, key) {
                if( !angular.isDefined(filterFont) ){
                    arrFont.push(font);
                }else{
                    var check = [];
                    if( !!filterFont.subset ){
                        check['subset'] = false;
                        angular.forEach(font.subsets, function(subset, key) {    
                            if( subset == filterFont.subset ) check['subset'] = true;
                        })                         
                    }else{
                        check['subset'] = true;
                    };     
                    if( !!filterFont.category ){ 
                        check['category'] = font.category == filterFont.category ? true : false;
                    }else{
                        check['category'] = true;
                    }; 
                    if( !!filterFont.name ){ 
                       check['name'] = font.family.toLowerCase().indexOf(filterFont.name.toLowerCase()) >= 0 ? true : false;
                    }else{
                        check['name'] = true;
                    };
                    check['select'] = true;
                    if( !!filterFont.select ){
                       check['select'] = filterFont.select == 'selected' ? ( font.selected ? true : false ) : ( font.selected ? false : true );
                    };                    
                    if( check['subset'] && check['category'] && check['name'] && check['select'] ) arrFont.push(font);
                }
            });
            return arrFont
        }
    });
    fontApp.directive("fontOnLoad", ['$interval', function($interval) {
        return {
            restrict: "A",
            scope: {
                font: '=',
                preview: '='
            },
            link: function(scope, element) {
                var font_id = scope.font.replace(/\s/gi, '').toLowerCase();
                if( !jQuery('#' + font_id).length ){
                    jQuery('head').append('<link id="' + font_id + '" href="https://fonts.googleapis.com/css?family='+ scope.font.replace(/\s/gi, '+') +'" rel="stylesheet" type="text/css">');
                }
                var font = new FontFaceObserver(scope.font);             
                font.load(scope.preview, 1E4).then(function () {
                    element.find(".font-loading").remove();
                    element.find(".font-preview").show();
                    element.parent('.gg-font-preview-inner').find('span.action ').removeClass('disable');
                }, function () {
                    console.log('Font '+scope.font+' is not available');
                }); 
                element.append('<span class="font-loading"><?php echo __('Loading...');?></span>')
            }
        }
    }]);
</script>